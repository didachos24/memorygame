{"version":3,"sources":["components/images/Vegeta_DBZ.png","components/images/goku.png","components/images/goten.png","components/images/Frieza.png","components/images/trunks.png","components/images/gokukid.png","components/images/Son_Gohan.png","components/Vegeta.js","components/Goku.js","components/Goten.js","components/Frieza.js","components/Trunks.js","components/GokuKid.js","components/Gohan.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Vegeta","react_default","a","createElement","className","src","vegeta","alt","Goku","goku","Goten","goten","Frieza","frieza","Trunks","trunks","GokuKid","gokukid","Gohan","gohan","App","components_Vegeta","components_Goku","components_Gohan","components_Goten","components_Frieza","components_Trunks","components_GokuKid","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8FAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,wDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,kDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oMCazBC,MARf,WACE,OACEC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAMC,UAAU,QAAQC,IAAKC,IAAQC,IAAI,6BCKlCC,MARf,WACE,OACEP,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAMC,UAAU,QAAQC,IAAKI,IAAMF,IAAI,2BCKhCG,MARf,WACE,OACET,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAMC,UAAU,QAAQC,IAAKM,IAAOJ,IAAI,4BCKjCK,MARf,WACE,OACEX,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAMC,UAAU,QAAQC,IAAKQ,IAAQN,IAAI,6BCKlCO,MARf,WACE,OACEb,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAMC,UAAU,QAAQC,IAAKU,IAAQR,IAAI,6BCKlCS,MARf,WACE,OACEf,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAMC,UAAU,QAAQC,IAAKY,IAASV,IAAI,+BCKnCW,MARf,WACE,OACEjB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAMC,UAAU,QAAQC,IAAKc,IAAOZ,IAAI,YCmBjCa,MAjBf,WACE,OACEnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAACkB,EAAD,MACApB,EAAAC,EAAAC,cAACmB,EAAD,MACArB,EAAAC,EAAAC,cAACoB,EAAD,MACAtB,EAAAC,EAAAC,cAACqB,EAAD,MACAvB,EAAAC,EAAAC,cAACsB,EAAD,MACAxB,EAAAC,EAAAC,cAACuB,EAAD,MACAzB,EAAAC,EAAAC,cAACwB,EAAD,SCTcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjC,EAAAC,EAAAC,cAACgC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cc3cac81.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Vegeta_DBZ.cfe7289e.png\";","module.exports = __webpack_public_path__ + \"static/media/goku.add47418.png\";","module.exports = __webpack_public_path__ + \"static/media/goten.d88e6693.png\";","module.exports = __webpack_public_path__ + \"static/media/Frieza.d32807fb.png\";","module.exports = __webpack_public_path__ + \"static/media/trunks.b012b2d0.png\";","module.exports = __webpack_public_path__ + \"static/media/gokukid.6982b4d6.png\";","module.exports = __webpack_public_path__ + \"static/media/Son_Gohan.645cfc37.png\";","import React from 'react';\nimport vegeta from'./images/Vegeta_DBZ.png';\nimport '../App.css';\n\n\nfunction Vegeta() {\n  return (\n    <div>\n        <img  className=\"Image\" src={vegeta} alt=\"Vegeta\"/>\n    </div>\n  );\n}\n\nexport default Vegeta;\n","import React from 'react';\nimport goku from'./images/goku.png';\nimport '../App.css';\n\n\nfunction Goku() {\n  return (\n    <div>\n        <img  className=\"Image\" src={goku} alt=\"Goku\"/>\n    </div>\n  );\n}\n\nexport default Goku;\n","import React from 'react';\nimport goten from'./images/goten.png';\nimport '../App.css';\n\n\nfunction Goten() {\n  return (\n    <div>\n        <img  className=\"Image\" src={goten} alt=\"Goten\" />\n    </div>\n  );\n}\n\nexport default Goten;\n","import React from 'react';\nimport frieza from'./images/Frieza.png';\nimport '../App.css';\n\n\nfunction Frieza() {\n  return (\n    <div>\n        <img  className=\"Image\" src={frieza} alt=\"Frieza\" />\n    </div>\n  );\n}\n\nexport default Frieza;\n","import React from 'react';\nimport trunks from'./images/trunks.png';\nimport '../App.css';\n\n\nfunction Trunks() {\n  return (\n    <div>\n        <img  className=\"Image\" src={trunks} alt=\"Trunks\" />\n    </div>\n  );\n}\n\nexport default Trunks;\n","import React from 'react';\nimport gokukid from'./images/gokukid.png';\nimport '../App.css';\n\n\nfunction GokuKid() {\n  return (\n    <div>\n        <img  className=\"Image\" src={gokukid} alt=\"GokuKid\" />\n    </div>\n  );\n}\n\nexport default GokuKid;\n","import React from 'react';\nimport gohan from'./images/Son_Gohan.png';\nimport '../App.css';\n\n\nfunction Gohan() {\n  return (\n    <div>\n        <img  className=\"Image\" src={gohan} alt=\"Gohan\" />\n    </div>\n  );\n}\n\nexport default Gohan;\n","import React from 'react';\nimport Vegeta from \"./components/Vegeta.js\"; \nimport Goku from \"./components/Goku\";\nimport Goten from \"./components/Goten\";\nimport Frieza from \"./components/Frieza\";\nimport Trunks from \"./components/Trunks\";\nimport GokuKid from \"./components/GokuKid\";\nimport Gohan from \"./components/Gohan\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n    <div className=\"row\"></div>\n      <div className=\"row\">\n      <Vegeta />\n      <Goku />\n      <Gohan />\n      <Goten />\n      <Frieza />\n      <Trunks />\n      <GokuKid />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}